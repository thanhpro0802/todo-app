// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  username          String            @unique
  firstName         String?
  lastName          String?
  password          String
  avatar            String?
  timezone          String            @default("UTC")
  language          String            @default("en")
  emailVerified     Boolean           @default(false)
  emailVerifyToken  String?
  twoFactorEnabled  Boolean           @default(false)
  twoFactorSecret   String?
  subscriptionTier  SubscriptionTier  @default(FREE)
  isActive          Boolean           @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  tasks             Task[]
  sessions          Session[]
  preferences       UserPreferences?
  teamMemberships   TeamMember[]
  sharedTasks       TaskShare[]
  auditLogs         AuditLog[]
  ownedTeams        Team[]            @relation("TeamOwner")
  taskActivities    TaskActivity[]
  
  @@map("users")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  theme                 String   @default("light")
  notifications         Json     @default("{}")
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(false)
  autoAssignDeadlines   Boolean  @default(false)
  defaultTaskPriority   Priority @default(MEDIUM)
  workingHours          Json     @default("{}")
  weekStartsOn          Int      @default(1)
  dateFormat            String   @default("DD/MM/YYYY")
  timeFormat            String   @default("24h")
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model Task {
  id              String         @id @default(cuid())
  userId          String
  title           String
  description     String?
  completed       Boolean        @default(false)
  priority        Priority       @default(MEDIUM)
  category        String?
  tags            String[]
  dueDate         DateTime?
  estimatedTime   Int?           // in minutes
  actualTime      Int?           // in minutes
  attachments     String[]       // file URLs
  order           Int?           // for drag & drop ordering
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  completedAt     DateTime?
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  shares          TaskShare[]
  activities      TaskActivity[]
  subtasks        Subtask[]
  
  @@map("tasks")
}

model Subtask {
  id        String   @id @default(cuid())
  taskId    String
  text      String
  completed Boolean  @default(false)
  order     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("subtasks")
}

model TaskShare {
  id         String           @id @default(cuid())
  taskId     String
  userId     String
  permission TaskPermission   @default(VIEW)
  sharedAt   DateTime         @default(now())
  sharedBy   String
  
  task       Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, userId])
  @@map("task_shares")
}

model TaskActivity {
  id          String           @id @default(cuid())
  taskId      String
  userId      String
  action      TaskAction
  description String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  
  task        Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("task_activities")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  ownerId     String
  inviteCode  String       @unique
  settings    Json         @default("{}")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  projects    Project[]
  
  @@map("teams")
}

model TeamMember {
  id       String    @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole  @default(MEMBER)
  joinedAt DateTime  @default(now())
  
  team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
  @@map("team_members")
}

model Project {
  id          String    @id @default(cuid())
  teamId      String
  name        String
  description String?
  color       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@map("projects")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model AuditLog {
  id          String    @id @default(cuid())
  userId      String?
  action      String
  entity      String
  entityId    String?
  changes     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

enum SubscriptionTier {
  FREE
  PREMIUM
  TEAM
  ENTERPRISE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskPermission {
  VIEW
  EDIT
}

enum TaskAction {
  CREATED
  UPDATED
  COMPLETED
  DELETED
  SHARED
  UNSHARED
  COMMENTED
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}